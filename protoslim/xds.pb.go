// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xds.proto

// GRPC package - part of the URL. Service is added.
// URL: /PACKAGE.SERVICE/METHOD

package protoslim

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status struct {
	// The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A developer-facing error message, which should be in English. Any
	// user-facing error message should be localized and sent in the
	// [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// A list of messages that carry the error details.  There is a common set of
	// message types for APIs to use.
	// google.protobuf.Any
	Details              []*any.Any `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_d722efc245ed6ad3, []int{0}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Status) GetDetails() []*any.Any {
	if m != nil {
		return m.Details
	}
	return nil
}

type Node struct {
	// An opaque node identifier for the Envoy node. This also provides the local
	// service node name. It should be set if any of the following features are
	// used: :ref:`statsd <arch_overview_statistics>`, :ref:`CDS
	// <config_cluster_manager_cds>`, and :ref:`HTTP tracing
	// <arch_overview_tracing>`, either in this message or via
	// :option:`--service-node`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Defines the local service cluster name where Envoy is running. Though
	// optional, it should be set if any of the following features are used:
	// :ref:`statsd <arch_overview_statistics>`, :ref:`health check cluster
	// verification <config_cluster_manager_cluster_hc_service_name>`,
	// :ref:`runtime override directory <config_runtime_override_subdirectory>`,
	// :ref:`user agent addition <config_http_conn_man_add_user_agent>`,
	// :ref:`HTTP global rate limiting <config_http_filters_rate_limit>`,
	// :ref:`CDS <config_cluster_manager_cds>`, and :ref:`HTTP tracing
	// <arch_overview_tracing>`, either in this message or via
	// :option:`--service-cluster`.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// This is motivated by informing a management server during canary which
	// version of Envoy is being tested in a heterogeneous fleet. This will be set
	// by Envoy in management server RPCs.
	BuildVersion         string   `protobuf:"bytes,5,opt,name=build_version,json=buildVersion,proto3" json:"build_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_d722efc245ed6ad3, []int{1}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *Node) GetBuildVersion() string {
	if m != nil {
		return m.BuildVersion
	}
	return ""
}

// Binary compatible with DiscoveryRequest, with payload extension
type DiscoveryRequest struct {
	// The version_info provided in the request messages will be the version_info
	// received with the most recent successfully processed response or empty on
	// the first request. It is expected that no new request is sent after a
	// response is received until the Envoy instance is ready to ACK/NACK the new
	// configuration. ACK/NACK takes place by returning the new API config version
	// as applied or the previous API config version respectively. Each type_url
	// (see below) has an independent version associated with it.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	// The node making the request.
	Node *Node `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// List of resources to subscribe to, e.g. list of cluster names or a route
	// configuration name. If this is empty, all resources for the API are
	// returned. LDS/CDS expect empty resource_names, since this is global
	// discovery for the Envoy instance. The LDS and CDS responses will then imply
	// a number of resources that need to be fetched via EDS/RDS, which will be
	// explicitly enumerated in resource_names.
	ResourceNames []string `protobuf:"bytes,3,rep,name=resource_names,json=resourceNames,proto3" json:"resource_names,omitempty"`
	// Type of the resource that is being requested, e.g.
	// "type.googleapis.com/envoy.api.v2.ClusterLoadAssignment". This is implicit
	// in requests made via singleton xDS APIs such as CDS, LDS, etc. but is
	// required for ADS.
	TypeUrl string `protobuf:"bytes,4,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	// nonce corresponding to DiscoveryResponse being ACK/NACKed. See above
	// discussion on version_info and the DiscoveryResponse nonce comment. This
	// may be empty if no nonce is available, e.g. at startup or for non-stream
	// xDS implementations.
	ResponseNonce string `protobuf:"bytes,5,opt,name=response_nonce,json=responseNonce,proto3" json:"response_nonce,omitempty"`
	// This is populated when the previous :ref:`DiscoveryResponse <envoy_api_msg_DiscoveryResponse>`
	// failed to update configuration. The *message* field in *error_details* provides the Envoy
	// internal exception related to the failure. It is only intended for consumption during manual
	// debugging, the string provided is not guaranteed to be stable across Envoy versions.
	// google.rpc.Status
	ErrorDetail          *Status  `protobuf:"bytes,6,opt,name=error_detail,json=errorDetail,proto3" json:"error_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoveryRequest) Reset()         { *m = DiscoveryRequest{} }
func (m *DiscoveryRequest) String() string { return proto.CompactTextString(m) }
func (*DiscoveryRequest) ProtoMessage()    {}
func (*DiscoveryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d722efc245ed6ad3, []int{2}
}

func (m *DiscoveryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoveryRequest.Unmarshal(m, b)
}
func (m *DiscoveryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoveryRequest.Marshal(b, m, deterministic)
}
func (m *DiscoveryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryRequest.Merge(m, src)
}
func (m *DiscoveryRequest) XXX_Size() int {
	return xxx_messageInfo_DiscoveryRequest.Size(m)
}
func (m *DiscoveryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryRequest proto.InternalMessageInfo

func (m *DiscoveryRequest) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

func (m *DiscoveryRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *DiscoveryRequest) GetResourceNames() []string {
	if m != nil {
		return m.ResourceNames
	}
	return nil
}

func (m *DiscoveryRequest) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *DiscoveryRequest) GetResponseNonce() string {
	if m != nil {
		return m.ResponseNonce
	}
	return ""
}

func (m *DiscoveryRequest) GetErrorDetail() *Status {
	if m != nil {
		return m.ErrorDetail
	}
	return nil
}

type DiscoveryResponse struct {
	// The version of the response data.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	// The response resources. These resources are typed and depend on the API being called.
	// google.protobuf.Any
	Resources []*any.Any `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	// [#not-implemented-hide:]
	// Canary is used to support two Envoy command line flags:
	//
	// * --terminate-on-canary-transition-failure. When set, Envoy is able to
	//   terminate if it detects that configuration is stuck at canary. Consider
	//   this example sequence of updates:
	//   - Management server applies a canary config successfully.
	//   - Management server rolls back to a production config.
	//   - Envoy rejects the new production config.
	//   Since there is no sensible way to continue receiving configuration
	//   updates, Envoy will then terminate and apply production config from a
	//   clean slate.
	// * --dry-run-canary. When set, a canary response will never be applied, only
	//   validated via a dry run.
	Canary bool `protobuf:"varint,3,opt,name=canary,proto3" json:"canary,omitempty"`
	// Type URL for resources. This must be consistent with the type_url in the
	// Any messages for resources if resources is non-empty. This effectively
	// identifies the xDS API when muxing over ADS.
	TypeUrl string `protobuf:"bytes,4,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	// For gRPC based subscriptions, the nonce provides a way to explicitly ack a
	// specific DiscoveryResponse in a following DiscoveryRequest. Additional
	// messages may have been sent by Envoy to the management server for the
	// previous version on the stream prior to this DiscoveryResponse, that were
	// unprocessed at response send time. The nonce allows the management server
	// to ignore any further DiscoveryRequests for the previous version until a
	// DiscoveryRequest bearing the nonce. The nonce is optional and is not
	// required for non-stream based xDS implementations.
	Nonce                string   `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoveryResponse) Reset()         { *m = DiscoveryResponse{} }
func (m *DiscoveryResponse) String() string { return proto.CompactTextString(m) }
func (*DiscoveryResponse) ProtoMessage()    {}
func (*DiscoveryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d722efc245ed6ad3, []int{3}
}

func (m *DiscoveryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoveryResponse.Unmarshal(m, b)
}
func (m *DiscoveryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoveryResponse.Marshal(b, m, deterministic)
}
func (m *DiscoveryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryResponse.Merge(m, src)
}
func (m *DiscoveryResponse) XXX_Size() int {
	return xxx_messageInfo_DiscoveryResponse.Size(m)
}
func (m *DiscoveryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryResponse proto.InternalMessageInfo

func (m *DiscoveryResponse) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

func (m *DiscoveryResponse) GetResources() []*any.Any {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *DiscoveryResponse) GetCanary() bool {
	if m != nil {
		return m.Canary
	}
	return false
}

func (m *DiscoveryResponse) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *DiscoveryResponse) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

type Resource struct {
	// The resource's name, to distinguish it from others of the same type of resource.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The aliases are a list of other names that this resource can go by.
	Aliases []string `protobuf:"bytes,4,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// The resource level version. It allows xDS to track the state of individual
	// resources.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The resource being tracked.
	Resource *any.Any `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// Time-to-live value for the resource. For each resource, a timer is started. The timer is
	// reset each time the resource is received with a new TTL. If the resource is received with
	// no TTL set, the timer is removed for the resource. Upon expiration of the timer, the
	// configuration for the resource will be removed.
	//
	// The TTL can be refreshed or changed by sending a response that doesn't change the resource
	// version. In this case the resource field does not need to be populated, which allows for
	// light-weight "heartbeat" updates to keep a resource with a TTL alive.
	//
	// The TTL feature is meant to support configurations that should be removed in the event of
	// a management server failure. For example, the feature may be used for fault injection
	// testing where the fault injection should be terminated in the event that Envoy loses contact
	// with the management server.
	Ttl *duration.Duration `protobuf:"bytes,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Cache control properties for the resource.
	// [#not-implemented-hide:]
	CacheControl         *Resource_CacheControl `protobuf:"bytes,7,opt,name=cache_control,json=cacheControl,proto3" json:"cache_control,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_d722efc245ed6ad3, []int{4}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Resource) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func (m *Resource) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Resource) GetResource() *any.Any {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Resource) GetTtl() *duration.Duration {
	if m != nil {
		return m.Ttl
	}
	return nil
}

func (m *Resource) GetCacheControl() *Resource_CacheControl {
	if m != nil {
		return m.CacheControl
	}
	return nil
}

// Cache control properties for the resource.
// [#not-implemented-hide:]
type Resource_CacheControl struct {
	// If true, xDS proxies may not cache this resource.
	// Note that this does not apply to clients other than xDS proxies, which must cache resources
	// for their own use, regardless of the value of this field.
	DoNotCache           bool     `protobuf:"varint,1,opt,name=do_not_cache,json=doNotCache,proto3" json:"do_not_cache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resource_CacheControl) Reset()         { *m = Resource_CacheControl{} }
func (m *Resource_CacheControl) String() string { return proto.CompactTextString(m) }
func (*Resource_CacheControl) ProtoMessage()    {}
func (*Resource_CacheControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_d722efc245ed6ad3, []int{4, 0}
}

func (m *Resource_CacheControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource_CacheControl.Unmarshal(m, b)
}
func (m *Resource_CacheControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource_CacheControl.Marshal(b, m, deterministic)
}
func (m *Resource_CacheControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource_CacheControl.Merge(m, src)
}
func (m *Resource_CacheControl) XXX_Size() int {
	return xxx_messageInfo_Resource_CacheControl.Size(m)
}
func (m *Resource_CacheControl) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource_CacheControl.DiscardUnknown(m)
}

var xxx_messageInfo_Resource_CacheControl proto.InternalMessageInfo

func (m *Resource_CacheControl) GetDoNotCache() bool {
	if m != nil {
		return m.DoNotCache
	}
	return false
}

func init() {
	proto.RegisterType((*Status)(nil), "envoy.service.discovery.v3.Status")
	proto.RegisterType((*Node)(nil), "envoy.service.discovery.v3.Node")
	proto.RegisterType((*DiscoveryRequest)(nil), "envoy.service.discovery.v3.DiscoveryRequest")
	proto.RegisterType((*DiscoveryResponse)(nil), "envoy.service.discovery.v3.DiscoveryResponse")
	proto.RegisterType((*Resource)(nil), "envoy.service.discovery.v3.Resource")
	proto.RegisterType((*Resource_CacheControl)(nil), "envoy.service.discovery.v3.Resource.CacheControl")
}

func init() { proto.RegisterFile("xds.proto", fileDescriptor_d722efc245ed6ad3) }

var fileDescriptor_d722efc245ed6ad3 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x6e, 0x13, 0x3d,
	0x10, 0xfe, 0x37, 0x49, 0xd3, 0x64, 0x92, 0x54, 0x3f, 0x56, 0x85, 0x36, 0x39, 0xa0, 0x10, 0x84,
	0x14, 0x41, 0xbb, 0x29, 0x29, 0x2f, 0x50, 0x5a, 0x0e, 0x5c, 0x72, 0x70, 0xd5, 0x1e, 0xb8, 0xac,
	0x9c, 0x5d, 0x67, 0xb3, 0x68, 0xe3, 0x09, 0xb6, 0x37, 0x90, 0x0b, 0x2f, 0x02, 0x6f, 0xc1, 0x91,
	0x97, 0x43, 0xb6, 0xd7, 0x6d, 0x54, 0x20, 0xea, 0xcd, 0x33, 0xf3, 0x8d, 0xbf, 0xf9, 0xbe, 0xf1,
	0x2e, 0xb4, 0xbf, 0xa6, 0x2a, 0x5a, 0x4b, 0xd4, 0x48, 0x06, 0x5c, 0x6c, 0x70, 0x1b, 0x29, 0x2e,
	0x37, 0x79, 0xc2, 0xa3, 0x34, 0x57, 0x09, 0x6e, 0xb8, 0xdc, 0x46, 0x9b, 0xf3, 0x41, 0x3f, 0x43,
	0xcc, 0x0a, 0x3e, 0xb1, 0xc8, 0x79, 0xb9, 0x98, 0x30, 0xb1, 0x75, 0x6d, 0x83, 0x67, 0x0f, 0x4b,
	0x69, 0x29, 0x99, 0xce, 0x51, 0xb8, 0xfa, 0x68, 0x01, 0xcd, 0x6b, 0xcd, 0x74, 0xa9, 0x08, 0x81,
	0x46, 0x82, 0x29, 0x0f, 0x83, 0x61, 0x30, 0x3e, 0xa0, 0xf6, 0x4c, 0x42, 0x38, 0x5c, 0x71, 0xa5,
	0x58, 0xc6, 0xc3, 0xda, 0x30, 0x18, 0xb7, 0xa9, 0x0f, 0x49, 0x04, 0x87, 0x29, 0xd7, 0x2c, 0x2f,
	0x54, 0x58, 0x1f, 0xd6, 0xc7, 0x9d, 0xe9, 0x71, 0xe4, 0x98, 0x22, 0xcf, 0x14, 0x5d, 0x88, 0x2d,
	0xf5, 0xa0, 0xd1, 0x0d, 0x34, 0x66, 0xe6, 0xc6, 0x23, 0xa8, 0xe5, 0xa9, 0xe5, 0x68, 0xd3, 0x5a,
	0x9e, 0x1a, 0x86, 0xa4, 0x28, 0x95, 0xe6, 0xd2, 0x33, 0x54, 0x21, 0x79, 0x01, 0xbd, 0x79, 0x99,
	0x17, 0x69, 0xbc, 0xe1, 0x52, 0xe5, 0x28, 0xc2, 0x03, 0x5b, 0xef, 0xda, 0xe4, 0xad, 0xcb, 0x8d,
	0xbe, 0xd7, 0xe0, 0xff, 0x2b, 0x6f, 0x05, 0xe5, 0x9f, 0x4b, 0xae, 0x34, 0x79, 0x0e, 0xdd, 0xaa,
	0x27, 0xce, 0xc5, 0x02, 0x2b, 0xb6, 0x4e, 0x95, 0xfb, 0x20, 0x16, 0x48, 0xde, 0x42, 0x43, 0x18,
	0xb1, 0x86, 0xb3, 0x33, 0x1d, 0x46, 0xff, 0x36, 0x37, 0x32, 0x63, 0x53, 0x8b, 0x26, 0x2f, 0xe1,
	0x48, 0x72, 0x85, 0xa5, 0x4c, 0x78, 0x2c, 0xd8, 0x8a, 0x3b, 0xed, 0x6d, 0xda, 0xf3, 0xd9, 0x99,
	0x49, 0x92, 0x3e, 0xb4, 0xf4, 0x76, 0xcd, 0xe3, 0x52, 0x16, 0x61, 0xc3, 0x89, 0x32, 0xf1, 0x8d,
	0x2c, 0xaa, 0x1b, 0xd6, 0x28, 0x14, 0x8f, 0x05, 0x8a, 0x84, 0x57, 0xaa, 0x7a, 0x3e, 0x3b, 0x33,
	0x49, 0xf2, 0x1e, 0xba, 0x5c, 0x4a, 0x94, 0xb1, 0xb3, 0x2f, 0x6c, 0xda, 0x31, 0x47, 0xfb, 0xc6,
	0x74, 0x5b, 0xa4, 0x1d, 0xdb, 0x77, 0x65, 0xdb, 0x46, 0x3f, 0x03, 0x78, 0xb2, 0xe3, 0x8e, 0x63,
	0x78, 0x8c, 0x3d, 0x53, 0x68, 0x7b, 0x49, 0x2a, 0xac, 0xed, 0xd9, 0xef, 0x3d, 0x8c, 0x3c, 0x85,
	0x66, 0xc2, 0x04, 0x93, 0xdb, 0xb0, 0x3e, 0x0c, 0xc6, 0x2d, 0x5a, 0x45, 0xfb, 0xdc, 0x38, 0x86,
	0x83, 0x5d, 0x13, 0x5c, 0x30, 0xfa, 0x55, 0x83, 0x16, 0xad, 0xae, 0x35, 0xaf, 0xd2, 0x38, 0x6d,
	0xef, 0x6c, 0x53, 0x7b, 0x36, 0x6f, 0x86, 0x15, 0x39, 0x53, 0x5c, 0x85, 0x0d, 0xeb, 0xbf, 0x0f,
	0x4d, 0xc5, 0xbf, 0x16, 0xa7, 0xca, 0x87, 0xe4, 0x0c, 0x5a, 0x7e, 0xd4, 0x6a, 0xe9, 0x7f, 0x17,
	0x74, 0x87, 0x22, 0xaf, 0xa1, 0xae, 0xb5, 0xb7, 0xbe, 0xff, 0x07, 0xf8, 0xaa, 0xfa, 0x8e, 0xa8,
	0x41, 0x91, 0x5b, 0xe8, 0x25, 0x2c, 0x59, 0xf2, 0x38, 0x41, 0xa1, 0x25, 0x16, 0xe1, 0xa1, 0x6d,
	0x7b, 0xb3, 0x6f, 0x63, 0x5e, 0x63, 0x74, 0x69, 0x3a, 0x2f, 0x5d, 0x23, 0xed, 0x26, 0x3b, 0xd1,
	0xe0, 0x0c, 0xba, 0xbb, 0x55, 0x32, 0x84, 0x6e, 0x8a, 0xb1, 0x40, 0x1d, 0x5b, 0x98, 0x55, 0xd9,
	0xa2, 0x90, 0xe2, 0x0c, 0xb5, 0x05, 0x4e, 0x7f, 0x04, 0x30, 0xb8, 0xc8, 0x32, 0xc9, 0x33, 0xa6,
	0x79, 0x7a, 0xb7, 0xfd, 0x6b, 0x37, 0x01, 0xf9, 0x06, 0xfd, 0x6b, 0x2d, 0x39, 0x5b, 0xdd, 0x63,
	0xe8, 0xdd, 0x0a, 0x4f, 0xf6, 0x8d, 0xfb, 0xf0, 0x33, 0x1b, 0x9c, 0x3e, 0x12, 0xed, 0x9e, 0xdd,
	0xe8, 0xbf, 0x71, 0x70, 0x16, 0xbc, 0x3b, 0xf9, 0xf8, 0x2a, 0xcb, 0xf5, 0xb2, 0x9c, 0x47, 0x09,
	0xae, 0x26, 0x4b, 0xfc, 0xc2, 0x64, 0xfa, 0x09, 0x97, 0x62, 0xb2, 0xce, 0x0b, 0xd4, 0xa7, 0x05,
	0xb2, 0xd4, 0xfd, 0xab, 0x54, 0x91, 0xaf, 0xe6, 0x4d, 0x7b, 0x3c, 0xff, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0xb1, 0xa3, 0x26, 0x87, 0x08, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AggregatedDiscoveryServiceClient is the client API for AggregatedDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AggregatedDiscoveryServiceClient interface {
	StreamAggregatedResources(ctx context.Context, opts ...grpc.CallOption) (AggregatedDiscoveryService_StreamAggregatedResourcesClient, error)
}

type aggregatedDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewAggregatedDiscoveryServiceClient(cc *grpc.ClientConn) AggregatedDiscoveryServiceClient {
	return &aggregatedDiscoveryServiceClient{cc}
}

func (c *aggregatedDiscoveryServiceClient) StreamAggregatedResources(ctx context.Context, opts ...grpc.CallOption) (AggregatedDiscoveryService_StreamAggregatedResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AggregatedDiscoveryService_serviceDesc.Streams[0], "/envoy.service.discovery.v3.AggregatedDiscoveryService/StreamAggregatedResources", opts...)
	if err != nil {
		return nil, err
	}
	x := &aggregatedDiscoveryServiceStreamAggregatedResourcesClient{stream}
	return x, nil
}

type AggregatedDiscoveryService_StreamAggregatedResourcesClient interface {
	Send(*DiscoveryRequest) error
	Recv() (*DiscoveryResponse, error)
	grpc.ClientStream
}

type aggregatedDiscoveryServiceStreamAggregatedResourcesClient struct {
	grpc.ClientStream
}

func (x *aggregatedDiscoveryServiceStreamAggregatedResourcesClient) Send(m *DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aggregatedDiscoveryServiceStreamAggregatedResourcesClient) Recv() (*DiscoveryResponse, error) {
	m := new(DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AggregatedDiscoveryServiceServer is the server API for AggregatedDiscoveryService service.
type AggregatedDiscoveryServiceServer interface {
	StreamAggregatedResources(AggregatedDiscoveryService_StreamAggregatedResourcesServer) error
}

func RegisterAggregatedDiscoveryServiceServer(s *grpc.Server, srv AggregatedDiscoveryServiceServer) {
	s.RegisterService(&_AggregatedDiscoveryService_serviceDesc, srv)
}

func _AggregatedDiscoveryService_StreamAggregatedResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AggregatedDiscoveryServiceServer).StreamAggregatedResources(&aggregatedDiscoveryServiceStreamAggregatedResourcesServer{stream})
}

type AggregatedDiscoveryService_StreamAggregatedResourcesServer interface {
	Send(*DiscoveryResponse) error
	Recv() (*DiscoveryRequest, error)
	grpc.ServerStream
}

type aggregatedDiscoveryServiceStreamAggregatedResourcesServer struct {
	grpc.ServerStream
}

func (x *aggregatedDiscoveryServiceStreamAggregatedResourcesServer) Send(m *DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aggregatedDiscoveryServiceStreamAggregatedResourcesServer) Recv() (*DiscoveryRequest, error) {
	m := new(DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AggregatedDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.service.discovery.v3.AggregatedDiscoveryService",
	HandlerType: (*AggregatedDiscoveryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAggregatedResources",
			Handler:       _AggregatedDiscoveryService_StreamAggregatedResources_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "xds.proto",
}
